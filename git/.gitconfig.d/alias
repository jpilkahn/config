[alias]
    a = add
    aa = add * .*
    ai = add --interactive
    au = add -u

    assume = update-index --assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    assume-all = "!git st -s | awk {'print $2'} | xargs git assume"

    branch = branch -ra
    br = branch -ra
    brc = checkout -b
    brD = branch -D
    brm = branch -m

    c = commit
    ca = commit --amend
    ce = "!git commit --allow-empty"
    cem = ce -m
    cm = commit -m

    cma = commit -a -m
    caa = commit -a --amend -C HEAD

    cpi = cherry-pick
    cpia = cherry-pick --abort
    cpic = cherry-pick --continue

    cl = clone

    co = checkout
    cob = checkout -b
    coo = "!f() { git co --ours $@ && git add $@; }; f"
    cot = "!f() { git co --theirs $@ && git add $@; }; f"

    d = diff
    dc = diff --cached
    dcs = dc --stat
    dlc = diff --cached HEAD^
    diff-range = "!f() { git diff -w "$1"^.."$1"; }; f"
    dr = diff-range
    ds = diff --stat

    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

    filelog = log -u
    fl = filelog

    gr = grep -Ii
    grf = "!git lf | rg -i"

    ic = !git commit --allow-empty -m "chore(git): initial commit"

    identity = "! git config user.name \"$(git config user.$1.name)\"; git config user.email \"$(git config user.$1.email)\"; git config user.signingkey \"$(git config user.$1.signingkey)\"; :"
    id = identity

    l = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    lc = "!f() { git ll "$1"^.."$1"; }; f"
    lf = filelog
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

    la = "!git config -l | grep alias | cut -c 7-"

    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

    last = "!gvim $(git show HEAD --format="" --name-only | xargs)"

    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    patch = "!git --no-pager diff -p --no-color"

    pl = pull

    ps = push
    psf = push --force

    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard
    rs = reset --soft
    rs1 = reset HEAD^ --soft
    rs2 = reset HEAD^^ --soft

    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbi = rebase -i
    rbi5 = rebase -i HEAD~5
    rbi10 = rebase -i HEAD~10
    rbia = rebase -i --autosquash
    rbia5 = rebase -i HEAD~5 --autosquash
    rbia10 = rebase -i HEAD~10 --autosquash
    rbm = rebase main

    rem = "!git config -l | grep remote.*url | tail -n +2"

    rp = "remote prune"
    rpo = "remote prune origin"

    rst = restore
    rstg = restore --staged

    s = status
    ss = ss -s

    sh = show

    st = stash
    stl = stash list
    sta = stash apply
    staat = "!f() { git stash apply stash@{$1}; }; f"
    stsv = stash save
    stsh = stash show
    stshat = "!f() { git stash show stash@{$1}; }; f"
    stshuat = "!f() { git show 'stash@{$1}^3' }; f"
    stiu = stash --include-untracked

    suba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"
    subp = "!f() { git subtree pull --prefix $2 $1 master --squash; }; f"

    unassume = update-index --no-assume-unchanged
    unassume-all = "!git assumed | xargs git update-index --no-assume-unchanged"
