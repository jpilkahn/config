[alias]
    st = status
    s = st
    sts = st -s
    ss = sts

    identity = "! git config user.name \"$(git config user.$1.name)\"; git config user.email \"$(git config user.$1.email)\"; git config user.signingkey \"$(git config user.$1.signingkey)\"; :"
    id = identity

    rbi = rebase -i
    rbi5 = rebase -i HEAD~5
    rbi10 = rebase -i HEAD~10
    rbia = rebase -i --autosquash
    rbia5 = rebase -i HEAD~5 --autosquash
    rbia10 = rebase -i HEAD~10 --autosquash
    rbm = rebase master

    a = add
    aa = add * .*
    ai = add --interactive
    au = add -u

    c = commit
    ca = commit --amend
    ce = "!git commit --allow-empty"
    cem = ce -m
    cm = commit -m

    cma = commit -a -m
    caa = commit -a --amend -C HEAD

    branch = branch -ra
    br = branch -ra
    brc = checkout -b
    brm = branch -m

    cb = checkout -b
    co = checkout

    d = diff
    dc = diff --cached
    dcs = dc --stat
    dlc = diff --cached HEAD^
    diff-range  = "!f() { git diff -w "$1"^.."$1"; }; f"
    dr = diff-range
    ds = diff --stat

    cp = cherry-pick
    patch = "!git --no-pager diff -p --no-color"
    p = patch

    filelog = log -u
    fl = filelog
    lf = filelog
    l = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    f = "!git lf | grep -i"
    grep = grep -Ii
    gr = grep -Ii

    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard

    cl = clone
    ic = !git commit --allow-empty -m "Initial commit"

    sh = stash
    shl = stash list
    sha = stash apply
    shaat = "!f() { git stash apply stash@{$1}; }; f"
    shv = stash save
    shw = stash show
    shwat = "!f() { git stash show stash@{$1}; }; f"

    shiu = stash --include-untracked

    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    assume-all = "!git st -s | awk {'print $2'} | xargs git assume"
    unassume-all = "!git assumed | xargs git update-index --no-assume-unchanged"

    suba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"
    subp = "!f() { git subtree pull --prefix $2 $1 master --squash; }; f"

    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    rem="!git config -l | grep remote.*url | tail -n +2"

    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

    last = "!gvim $(git show HEAD --format="" --name-only | xargs)"

    la = "!git config -l | grep alias | cut -c 7-"

    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
